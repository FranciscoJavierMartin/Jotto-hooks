{"version":3,"sources":["contexts/LanguageContext.tsx","contexts/SuccessContext.tsx","helpers/strings.ts","components/congrats/Congrats.tsx","contexts/GuessedWordsContext.tsx","components/guessedWords/GuessedWords.tsx","components/languagePicker/LanguagePicker.tsx","components/input/Input.tsx","helpers/index.ts","actions/hookActions.ts","constants.ts","actions/actionsTypes.ts","App.tsx","index.tsx"],"names":["React","createContext","successContext","undefined","SuccessProvider","props","useState","success","setSuccess","value","useMemo","Provider","useSuccess","context","useContext","Error","languageStrings","en","congrats","submit","guessPrompt","guessInputPlaceholder","guessColumnHeader","guessedWords","matchingLettersColumnHeader","emoji","getStringByLanguage","languageCode","stringKey","strings","SuccessContext","language","LanguageContext","data-test","className","stringsModule","guessedWordsContext","GuessedWordsProvider","setGuessedWords","useGuessedWords","GuessedWords","GuessedWordsContext","guessedWordsRows","map","word","index","key","guessedWord","letterMatchCount","contents","length","LanguagePicker","languagueIcons","code","symbol","lang","onClick","setLanguage","Input","currentGuess","setCurrentGuess","type","placeholder","onChange","event","target","preventDefault","secretWord","secretLetterSet","Set","split","guessedLetterSet","filter","letter","has","getLetterMatchCount","newGuessedWords","promesa","x","Promise","resolve","setTimeout","data","getSecretWord","setSecretWord","a","race","axios","get","response","reducer","state","action","newState","payload","App","useReducer","dispatch","ActionTypes","useEffect","hookActions","Congrats","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7614d284.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext('en');","import React from 'react';\n\nconst successContext = React.createContext(undefined);\n\n/**\n * @function useSuccess\n * @returns {array} successContext value, which is a state of [value, setter]\n */\nfunction useSuccess(): any[]{\n  const context = React.useContext(successContext);\n\n  if(!context){\n    throw new Error('useSuccess must be used within a SuccessProvider');\n  }\n\n  return context;\n}\n\n/**\n * @function SuccessProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component\n */\nfunction SuccessProvider(props: any){\n  const [success, setSuccess] = React.useState(false);\n\n  const value = React.useMemo(() => [success, setSuccess], [success]) as any[];\n\n  return <successContext.Provider value={value} {...props}/>\n}\n\nexport default { SuccessProvider, useSuccess }","const languageStrings: any = {\n  en: {\n    congrats: 'Congratulations! You guessed the word!',\n    submit: 'Submit',\n    guessPrompt: 'Try to guess the secret word!',\n    guessInputPlaceholder: 'enter guess',\n    guessColumnHeader: 'Guessed Words',\n    guessedWords: 'Guesses',\n    matchingLettersColumnHeader: 'Matching Letters'\n  },\n  emoji: {\n    congrats: '🎯🎉',\n    submit: '🚀',\n    guessPrompt: '🤔🤫🔤',\n    guessInputPlaceholder: '⌨️🤔',\n    guessedWords: '🤷‍🔤',\n    guessColumnHeader: '🤷‍',\n    matchingLettersColumnHeader: '✅'\n  }\n};\n\nfunction getStringByLanguage(\n  languageCode: string,\n  stringKey: string,\n  strings: any = languageStrings\n) {\n  return !strings[languageCode] || !strings[languageCode][stringKey]\n    ? strings.en[stringKey]\n    : strings[languageCode][stringKey];\n}\n\nexport default {\n  getStringByLanguage\n};\n","import React from 'react';\nimport LanguageContext from '../../contexts/LanguageContext';\nimport SuccessContext from '../../contexts/SuccessContext';\nimport stringsModule from '../../helpers/strings';\n\n/**\n * Functional react component for congratulary message\n * @function\n * @returns {JSX.Element} - Rendered component (or null if `success` props is)\n */\nexport default () => {\n    const [success] = SuccessContext.useSuccess();\n    const language = React.useContext(LanguageContext);\n\n    let res = !!success ? (\n        <div data-test=\"component-congrats\" className=\"alert alert-success\">\n            <span data-test=\"congrats-message\">\n                {stringsModule.getStringByLanguage(language, 'congrats')}\n            </span>\n        </div>\n    ) : (\n        <div data-test=\"component-congrats\" />\n    );\n\n    return res;\n}","import React from 'react';\n\nconst guessedWordsContext = React.createContext(undefined);\n\n/**\n * @function useGuessedWords\n * @returns {Array} guessedWordsContext value, which is a state of [value, setter]\n */\nexport function useGuessedWords(): any[] {\n  // useContext is a hook that returns the context value\n  // In this case, the context value is an [value, setter] array for the context state\n  // useContext also subscribes to changes, and will update any time the context value updates\n  //     we've memoized this so that it will only update when the guessedWords value updates\n  const context = React.useContext(guessedWordsContext);\n\n  if(!context){\n    throw new Error('useGuessedWords must be used within a GuessedWordsProvider');\n  }\n\n  return context;\n}\n\n/**\n * @function GuessedWordsProvider\n * @param {object} props - props to pass through from declared component\n * @returns {JSX.Element} Provider component\n */\nexport function GuessedWordsProvider(props: any){\n  const [guessedWords, setGuessedWords] = React.useState([]);\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [guessedWords]) as any[];\n  return <guessedWordsContext.Provider value={value} {...props}/>\n}\n\nexport default { GuessedWordsProvider, useGuessedWords }","import React from 'react';\nimport { IGuessedWord } from '../../common/interfaces';\nimport LanguageContext from '../../contexts/LanguageContext';\nimport stringsModule from '../../helpers/strings';\nimport GuessedWordsContext from '../../contexts/GuessedWordsContext';\n\nconst GuessedWords = () => {\n  const [guessedWords] = GuessedWordsContext.useGuessedWords();\n  const guessedWordsRows = guessedWords.map(\n    (word: IGuessedWord, index: number) => (\n      <tr data-test='guessed-word' key={index}>\n        <td>{word.guessedWord}</td>\n        <td>{word.letterMatchCount}</td>\n      </tr>\n    )\n  );\n  \n  const language = React.useContext(LanguageContext);\n\n  let contents =\n    guessedWords.length === 0 ? (\n      <span data-test='guess-instructions'>{stringsModule.getStringByLanguage(language, 'guessPrompt')}</span>\n    ) : (\n      <div data-test='guessed-words'>\n        <h3>{stringsModule.getStringByLanguage(language, 'guessedWords')}</h3>\n        <table className=\"table table-sm\">\n          <thead className=\"thead-ligth\">\n            <tr>\n              <th>{stringsModule.getStringByLanguage(language, 'guessColumnHeader')}</th>\n              <th>{stringsModule.getStringByLanguage(language, 'matchingLettersColumnHeader')}</th>\n            </tr>\n          </thead>\n          <tbody>{guessedWordsRows}</tbody>\n        </table>\n      </div>\n    );\n\n  return <div data-test='component-guessed-words'>{contents}</div>;\n};\n\nexport default GuessedWords;\n","import React from 'react';\n\ninterface ILanguagePickerProps {\n  setLanguage: (lang: string) => void;\n}\n\nconst LanguagePicker = (props: ILanguagePickerProps) => {\n  const languages = [\n    { code: 'en', symbol: '🇺🇸' },\n    { code: 'emoji', symbol: '😊' }\n  ];\n\n  const languagueIcons = languages.map(lang =>\n    (<span\n      data-test='language-icon'\n      onClick={() => props.setLanguage(lang.code)}\n      key={lang.code}>\n      {lang.symbol}\n    </span>\n  ));\n\n  return <div data-test='component-language-picker'>{languagueIcons}</div>;\n};\n\nexport default LanguagePicker;\n","import React from 'react';\nimport stringsModule from '../../helpers/strings';\nimport LanguageContext from '../../contexts/LanguageContext';\nimport SuccessContext from '../../contexts/SuccessContext';\nimport guessedWordsContext from '../../contexts/GuessedWordsContext';\nimport { getLetterMatchCount } from '../../helpers';\n\ninterface IInputProps {\n  secretWord: string;\n}\n\nconst Input = (props: IInputProps) => {\n  const [ currentGuess, setCurrentGuess ] = React.useState<string>('');\n  const [ success, setSuccess ] = SuccessContext.useSuccess();\n  const [ guessedWords, setGuessedWords ] = guessedWordsContext.useGuessedWords();\n  const language: string = React.useContext(LanguageContext);\n  \n  return !!success ? null : (\n    <div data-test=\"component-input\">\n      <form className=\"form-inline\">\n        <input\n          data-test=\"input-box\"\n          className=\"mb-2 mx-sm-3\"\n          type=\"text\"\n          placeholder={stringsModule.getStringByLanguage(language, 'gessInputPlaceholder')}\n          value={currentGuess}\n          onChange={(event) => setCurrentGuess(event.target.value)}/>\n        <button\n          data-test=\"submit-button\"\n          className=\"btn btn-primary mb-2\"\n          onClick={(event) => {\n            event.preventDefault();\n            const letterMatchCount = getLetterMatchCount(currentGuess, props.secretWord);\n            const newGuessedWords = [...guessedWords, { guessedWord: currentGuess, letterMatchCount}];\n            setGuessedWords(newGuessedWords);\n\n            if(currentGuess === props.secretWord){\n              setSuccess(true);\n            }\n            \n            setCurrentGuess('');\n          }}>\n          {stringsModule.getStringByLanguage(language, 'submit')}\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default Input;","/**\n * @function getLetterMatchCount\n * @param {string} guessedWord - Guessed word.\n * @param {string} secretWord - Secret word.\n * @returns {number} - Number of letters matched between guessed word and secret word.\n */\nexport function getLetterMatchCount(guessedWord: string, secretWord: string): number {\n    const secretLetterSet = new Set(secretWord.split(''));\n    const guessedLetterSet = new Set(guessedWord.split(''));\n    return [...secretLetterSet].filter(letter => guessedLetterSet.has(letter)).length;\n};\n","import { URL_RANDOM_SERVER, DEFAULT_SECRET_WORD } from './../constants';\nimport axios from 'axios';\n\nfunction promesa(x: string){\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({data: x})\n    }, 50)\n  })\n}\n\nexport const getSecretWord = async (setSecretWord: any) => {\n  const response: any = await Promise.race([promesa(DEFAULT_SECRET_WORD), axios.get(URL_RANDOM_SERVER)])\n  setSecretWord(response.data);\n}\n\nexport default {\n  getSecretWord,\n}","export const URL_RANDOM_SERVER = 'http://localhost:3030';\nexport const DEFAULT_SECRET_WORD = 'qwerty';","const SET_SECRET_WORD = 'setSecretWord';\nconst SET_LANGUAGE = 'setLanguage';\n\nexport default {\n  SET_SECRET_WORD,\n  SET_LANGUAGE,\n}","import React from 'react';\nimport Congrats from './components/congrats/Congrats';\nimport GuessedWords from './components/guessedWords/GuessedWords';\nimport LanguagePicker from './components/languagePicker/LanguagePicker';\nimport Input from './components/input/Input';\nimport hookActions from './actions/hookActions';\nimport LanguageContext from './contexts/LanguageContext';\nimport successContext from './contexts/SuccessContext';\nimport GuessedWordsContext from './contexts/GuessedWordsContext';\nimport { IGlobalState, IGlobalAction } from './commonInterfaces';\nimport ActionTypes from './actions/actionsTypes';\n/**\n * reducer to update state\n * @param { IGlobalState } state - existing state\n * @param { IGlobalAction } action - contains 'type' and 'payload' properties for the\n *                            state update for example:\n *                            { type: \"setSecretWord\", payload: \"party\" }\n * @returns { IGlobalState } - new state\n */\nfunction reducer(state: IGlobalState, action: IGlobalAction): IGlobalState {\n  let newState;\n\n  switch (action.type) {\n    case 'setSecretWord':\n      newState = { ...state, secretWord: action.payload };\n      break;\n    case 'setLanguage':\n      newState = { ...state, language: action.payload };\n      break;\n    default:\n      newState = { ...state };\n      throw new Error(`Invalid action type: ${action.type}`);\n  }\n\n  return newState;\n}\n\nconst App = () => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    secretWord: null,\n    language: 'en'\n  });\n\n  const setSecretWord = (secretWord: string) =>\n    dispatch({type: ActionTypes.SET_SECRET_WORD, payload: secretWord})\n\n  const setLanguage = (language: string) =>\n    dispatch({type: ActionTypes.SET_LANGUAGE, payload: language})\n  \n  React.useEffect(() => {\n    hookActions.getSecretWord(setSecretWord);\n  }, []);\n\n  let content = !state.secretWord ? (\n    <div className='countainer' data-test='spinner'>\n      <div className='spinner-border' role='status'>\n        <span className='sr-only'>Loading...</span>\n      </div>\n      <p>Loading secret word</p>\n    </div>\n  ) : (\n    <div className='container' data-test='component-app'>\n      <h1>Jotto</h1>\n      <LanguageContext.Provider value={state.language}>\n        <LanguagePicker setLanguage={setLanguage} />\n        <GuessedWordsContext.GuessedWordsProvider>\n          <successContext.SuccessProvider>\n            <Congrats />\n            <Input secretWord={state.secretWord} />\n          </successContext.SuccessProvider>\n          <GuessedWords />\n        </GuessedWordsContext.GuessedWordsProvider>\n      </LanguageContext.Provider>\n    </div>\n  );\n\n  return content;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}